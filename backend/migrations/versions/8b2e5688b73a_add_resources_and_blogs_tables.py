"""Add resources and blogs tables

Revision ID: 8b2e5688b73a
Revises: 1c4c1240ae5f
Create Date: 2025-08-28 01:02:32.292898

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '8b2e5688b73a'
down_revision = '1c4c1240ae5f'
branch_labels = None
depends_on = None

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('blogs',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('title', sa.Text(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('author_id', sa.UUID(), nullable=False),
    sa.Column('cover_image_url', sa.Text(), nullable=True),
    sa.Column('status', sa.Text(), server_default='PENDING', nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('resources',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), nullable=False),
    sa.Column('title', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('author_id', sa.UUID(), nullable=False),
    sa.Column('type', sa.Text(), nullable=False),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('file_url', sa.Text(), nullable=True),
    sa.Column('status', sa.Text(), server_default='PENDING', nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['author_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###

    # ### BEGIN MANUAL ADDITION - THIS PART IS REQUIRED ###
    op.execute("""
        -- Enable Row Level Security on new tables
        ALTER TABLE public.resources ENABLE ROW LEVEL SECURITY;
        ALTER TABLE public.blogs ENABLE ROW LEVEL SECURITY;

        -- Policies for Resources table
        CREATE POLICY "Allow authenticated users to view approved resources" ON public.resources FOR SELECT TO authenticated USING (status = 'APPROVED');
        CREATE POLICY "Allow nurses and admins to create resources" ON public.resources FOR INSERT TO authenticated WITH CHECK (auth.uid() = author_id AND EXISTS (SELECT 1 FROM public.users WHERE id = auth.uid() AND role IN ('NURSE', 'ADMIN')));
        CREATE POLICY "Allow admins to approve resources" ON public.resources FOR UPDATE TO authenticated USING (EXISTS (SELECT 1 FROM public.users WHERE id = auth.uid() AND role = 'ADMIN')) WITH CHECK (status = 'APPROVED');

        -- Policies for Blogs table
        CREATE POLICY "Allow authenticated users to view approved blogs" ON public.blogs FOR SELECT TO authenticated USING (status = 'APPROVED');
        CREATE POLICY "Allow nurses and admins to create blogs" ON public.blogs FOR INSERT TO authenticated WITH CHECK (auth.uid() = author_id AND EXISTS (SELECT 1 FROM public.users WHERE id = auth.uid() AND role IN ('NURSE', 'ADMIN')));
        CREATE POLICY "Allow admins to approve blogs" ON public.blogs FOR UPDATE TO authenticated USING (EXISTS (SELECT 1 FROM public.users WHERE id = auth.uid() AND role = 'ADMIN')) WITH CHECK (status = 'APPROVED');
    """)
    
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('resources')
    op.drop_table('blogs')
    # ### end Alembic commands ###
